name: CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  check-encoding:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Check for encoding issues
        run: |
          # Run the comprehensive encoding check script
          chmod +x scripts/check_all_encoding.sh
          ./scripts/check_all_encoding.sh

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev portaudio19-dev ffmpeg
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.1.0 mypy==1.4.1 black==23.7.0 isort==5.12.0
          # Install build dependencies first
          pip install setuptools wheel Cython scikit-build
          # Install CI-specific dependencies
          pip install -r requirements-ci.txt
      - name: Lint with flake8
        run: |
          # Run flake8 with proper error reporting
          flake8 src tests --extend-ignore=E501 --exclude=*.pyc,__pycache__,*~
      - name: Type check with mypy
        run: |
          # Run mypy with appropriate settings
          mypy --ignore-missing-imports --no-strict-optional --disallow-untyped-defs src
      - name: Check code formatting
        run: |
          # Run formatting checks and properly report failures
          black --check src tests
          isort --check-only src tests

  test:
    runs-on: ubuntu-latest
    needs: [check-encoding, lint]
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    steps:
      - uses: actions/checkout@v3
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libssl-dev libffi-dev python3-dev portaudio19-dev ffmpeg
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest==7.4.0 pytest-asyncio==0.21.1 pytest-cov==4.1.0
          # Install build dependencies first
          pip install setuptools wheel Cython scikit-build
          # Install CI-specific dependencies
          pip install -r requirements-ci.txt
      - name: Test with pytest
        run: |
          # Run tests with proper error reporting
          PYTHONPATH=. pytest tests/ --cov=src/ --cov-report=xml --cov-fail-under=70
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  docker-test:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build Docker images
        run: |
          docker-compose build
      - name: Test Docker composition
        run: |
          # Create .env file with test values
          echo "JWT_SECRET=test-secret-key" > .env
          echo "ENCRYPTION_KEY=test-encryption-key" >> .env
          echo "REDIS_PASSWORD=test-redis-password" >> .env
          echo "GRAFANA_PASSWORD=admin" >> .env

          # Start containers
          docker-compose up -d

          # Wait for containers to be healthy
          MAX_ATTEMPTS=30
          DELAY=2
          attempt=0
          echo "Waiting for API service to be ready..."
          until $(curl --output /dev/null --silent --fail http://localhost:8080/health || [ $attempt -eq $MAX_ATTEMPTS ]); do
            printf '.'
            attempt=$((attempt+1))
            sleep $DELAY
          done

          if [ $attempt -lt $MAX_ATTEMPTS ]; then
            echo "API is ready!"
            curl -v http://localhost:8080/health
            docker-compose down
            exit 0
          else
            echo "API failed to start within time limit!"
            docker-compose logs api
            docker-compose down
            exit 1
          fi
